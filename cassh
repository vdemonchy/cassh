#!/usr/bin/env python
#-*- coding: utf-8 -*-
""" CASSH CLI """

# Standard library imports
from __future__ import print_function
from argparse import ArgumentParser
from codecs import getwriter
from datetime import datetime
from getpass import getpass
from json import dumps, loads
from os import chmod, chown, getenv
from os.path import isfile
from shutil import copyfile
import sys
try:
    # Python 3
    from urllib.parse import urlencode
except ImportError:
    # Python 2
    from urllib import urlencode

# Third party library imports
from configparser import ConfigParser, NoOptionError, NoSectionError
from requests import Session
from requests.exceptions import ConnectionError
from urllib3 import disable_warnings

# Disable HTTPs warnings
disable_warnings()

# Change codec
if sys.version_info < (3, 0):
    sys.stdout = getwriter('utf8')(sys.stdout)
    sys.stderr = getwriter('utf8')(sys.stderr)

# Debug
# from pdb import set_trace as st

VERSION = '%(prog)s 1.4.5'

def read_conf(conf_path):
    """
    Read CASSH configuration file and return metadata.
    """
    config = ConfigParser()
    config.read(conf_path)
    user_metadata = {}
    try:
        user_metadata['name'] = config.get('user', 'name')
        user_metadata['key_path'] = config.get('user', 'key_path')\
        .replace('~', getenv('HOME'))
        user_metadata['key_signed_path'] = config.get('user', 'key_signed_path')\
        .replace('~', getenv('HOME'))
        user_metadata['url'] = config.get('user', 'url')
    except NoOptionError as error_msg:
        print('Can\'t read configuration file...')
        print(error_msg)
        exit(1)

    if user_metadata['key_path'] == user_metadata['key_signed_path']:
        print('You should put a different path for key_path and key_signed_path.')
        exit(1)

    try:
        user_metadata['auth'] = 'ldap'
        user_metadata['realname'] = config.get('ldap', 'realname')
    except NoOptionError as error_msg:
        print('Can\'t read configuration file...')
        print(error_msg)
        exit(1)
    except NoSectionError:
        user_metadata['auth'] = None
        user_metadata['realname'] = None

    if not isfile(user_metadata['key_path']):
        print('File %s doesn\'t exists' % user_metadata['key_path'])
        exit(1)

    return user_metadata


def print_result(result):
    """ Display result """
    date_formatted = datetime.strptime(result['expiration'], '%Y-%m-%d %H:%M:%S')
    is_expired = date_formatted < datetime.now()
    if result['status'] == 'ACTIVE':
        if is_expired and date_formatted.year == 1970:
            result['status'] = 'NEVER SIGNED'
        elif is_expired:
            result['status'] = 'EXPIRED'
        else:
            result['status'] = 'SIGNED'
    print(dumps(result, indent=4, sort_keys=True))


class CASSH(object):
    """
    Main CASSH class.
    """
    def __init__(self, user_metadata):
        """
        Init file.
        """
        self.name = user_metadata['name']
        self.key_path = user_metadata['key_path']
        self.key_signed_path = user_metadata['key_signed_path']
        self.session = Session()
        self.url = user_metadata['url']
        self.auth = user_metadata['auth']
        self.realname = user_metadata['realname']


    def auth_url(self, prefix=None):
        """
        Return a xxx=xxx to put at the end of a GET request.
        """
        passwd_message = 'Please type your LDAP password (user=%s): ' % self.realname
        if self.auth == 'ldap':
            auth = {'realname': self.realname, 'password': getpass(passwd_message).encode('utf-8')}
            if prefix is not None:
                auth.update(prefix)
            return '?%s' % urlencode(auth)
        else:
            if prefix is None:
                return ''
            else:
                return '?%s' % urlencode(prefix)

    def admin(self, username, action, set_value=None):
        """
        Admin CLI
        """
        try:
            if action == 'revoke':
                req = self.session.get(self.url + '/admin/' + username +\
                    self.auth_url(prefix={'revoke': True}), verify=False)
            elif action == 'active':
                req = self.session.get(self.url + '/admin/' + username +\
                    self.auth_url(), verify=False)
            elif action == 'delete':
                req = self.session.delete(self.url + '/admin/' + username +\
                    self.auth_url(), verify=False)
            elif action == 'set':
                set_value_dict = {}
                set_value_dict[set_value.split('=')[0]] = set_value.split('=')[1]
                req = self.session.post(self.url + '/admin/' + username +\
                    self.auth_url(prefix=set_value_dict), verify=False)
            elif action == 'status':
                req = self.session.get(self.url + '/admin/' + username +\
                    self.auth_url(prefix={'status': True}), verify=False)
                try:
                    result = loads(req.text)
                except ValueError:
                    print(req.text)
                    return
                if result == {}:
                    print(dumps(result, indent=4, sort_keys=True))
                    return
                if username == 'all':
                    for user in result:
                        print_result(result[user])
                    return
                print_result(result)
                return
            else:
                print('Action should be : revoke, active, delete or status')
                exit(1)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        print(req.text)

    def add(self):
        """
        Add a public key.
        """
        pubkey = open('%s.pub' % self.key_path, 'rb')
        try:
            req = self.session.put(self.url + '/client' +\
                self.auth_url(prefix={'username': self.name}), data=pubkey, verify=False)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        print(req.text)

    def sign(self, do_write_on_disk, uid=None, force=False):
        """
        Sign a public key.
        """
        pubkey = open('%s.pub' % self.key_path, 'rb')
        try:
            if force:
                req = self.session.post(self.url + '/client' + \
                    self.auth_url(prefix={'username': self.name, 'admin_force': True}), \
                    data=pubkey, verify=False)
            else:
                req = self.session.post(self.url + '/client' + \
                    self.auth_url(prefix={'username': self.name}), data=pubkey, verify=False)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        if not 'ssh-' in req.text:
            print(req.text)
            exit(1)
        if do_write_on_disk:
            copyfile(self.key_path, self.key_signed_path)
            chmod(self.key_signed_path, 0o600)
            pubkey_signed = open('%s.pub' % self.key_signed_path, 'w+')
            pubkey_signed.write(req.text)
            pubkey_signed.close()
            if uid is not None:
                try:
                    chown(self.key_signed_path, int(uid), int(uid))
                    chown('%s.pub' % self.key_signed_path, int(uid), int(uid))
                except OSError:
                    print('Error: Cannot change ownership...')
            print('Public key successfuly signed')
        else:
            print(req.text)

    def status(self):
        """
        Get status of public key.
        """
        try:
            req = self.session.get(self.url + '/client' + self.auth_url(),\
                verify=False)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        try:
            result = loads(req.text)
        except ValueError:
            print(req.text)
            return
        if result == {}:
            print(dumps(result, indent=4, sort_keys=True))
            return
        print_result(result)

    def get_ca(self):
        """
        Get CA public key.
        """
        try:
            req = self.session.get(self.url + '/ca', verify=False)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        print(req.text)

    def get_krl(self):
        """
        Get CA KRL.
        """
        try:
            req = self.session.get(self.url + '/krl', verify=False)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        print(req.text)


if __name__ == '__main__':

    PARSER = ArgumentParser()

    SUBPARSERS = PARSER.add_subparsers(help='commands')

    PARSER.add_argument('--version', action='version', version=VERSION)

    # ADMIN Arguments
    ADMIN_PARSER = SUBPARSERS.add_parser('admin',\
        help='Administrator command : active - revoke - delete - status - set keys')
    ADMIN_PARSER.add_argument('username', action='store',\
        help='Username of client\'s key, if username is \'all\' status return all users')
    ADMIN_PARSER.add_argument('action', action='store',\
        help='Choice between : active - revoke - delete - status - set')
    ADMIN_PARSER.add_argument('-s', '--set', action='store',\
        help='CAUTION: Set value of a user.')

    # ADD Arguments
    ADD_PARSER = SUBPARSERS.add_parser('add', help='Add a key to remote ssh ca server.')

    # SIGN Arguments
    SIGN_PARSER = SUBPARSERS.add_parser('sign', help='Sign its key by remote ssh ca server.')
    SIGN_PARSER.add_argument('-d', '--display-only', action='store_true',\
        help='Display key in shell only.')
    SIGN_PARSER.add_argument('-f', '--force', action='store_true',\
        help='Admin can force signature if server enable it.')
    SIGN_PARSER.add_argument('-u', '--uid', action='store',\
        help='Force UID in key ownership.')

    # STATUS Arguments
    STATUS_PARSER = SUBPARSERS.add_parser('status',\
        help='Display key current status on remote ssh ca server.')

    # CA Arguments
    CA_PARSER = SUBPARSERS.add_parser('ca',\
        help='Display CA public key.')

    # KRL Arguments
    KRL_PARSER = SUBPARSERS.add_parser('krl',\
        help='Display CA KRL.')

    ARGS = PARSER.parse_args()

    CONF_FILE = '%s/.cassh' % getenv('HOME')

    if not isfile(CONF_FILE):
        print('Config file missing : %s' % CONF_FILE)
        print('Example:')
        print('[user]')
        print('# name : it\'s the user you will use to log in every server')
        print('name = user')
        print('# key_path : This key path won\'t be use to log in, a copy will be made.')
        print('# We assume that `${key_path}` exists and `${key_path}.pub` too.')
        print('# WARNING: Never delete these keys')
        print('key_path = ~/.ssh/id_rsa')
        print('# key_signed_path : Every signed key via cassh will be put in this path.')
        print('# At every sign, `${key_signed_path}` and `${key_signed_path}.pub` will be create.')
        print('key_signed_path = ~/.ssh/id_rsa-cert')
        print(' url : URL of cassh server-side backend.')
        print('url = https://cassh.net')
        print('')
        print('[ldap]')
        print('# realname : this is the LDAP/AD login user')
        print('realname = ursula.ser@domain.fr')
        exit(1)

    LBC = CASSH(read_conf(CONF_FILE))

    if len(sys.argv) == 1:
        PARSER.print_help()
        exit(1)

    if sys.argv[1] == 'add':
        LBC.add()
    elif sys.argv[1] == 'sign':
        LBC.sign(not ARGS.display_only, uid=ARGS.uid, force=ARGS.force)
    elif sys.argv[1] == 'status':
        LBC.status()
    elif sys.argv[1] == 'ca':
        LBC.get_ca()
    elif sys.argv[1] == 'krl':
        LBC.get_krl()
    elif sys.argv[1] == 'admin':
        LBC.admin(ARGS.username, ARGS.action, set_value=ARGS.set)

    exit(0)
